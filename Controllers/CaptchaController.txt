# 📄 CaptchaController – شرح كامل باللغة العربية

## ✅ الغرض من الكلاس
`CaptchaController` هو وحدة التحكم الرئيسية (Controller) في الخلفية التي تستقبل بيانات المستخدم المرسلة من الواجهة الأمامية (Frontend).  
هذه البيانات تمثل سلوك المستخدم في محاولة تجاوز اختبار CAPTCHA، ويتم تحليلها لاتخاذ قرار أمني:  
هل هذا المستخدم بشري حقيقي؟ أم مشبوه؟ أم يجب حظره؟

---

## ✅ كيفية عمل الكلاس خطوة بخطوة

### 📍 المسار (Route)
```csharp
[Route("api/[controller]")]
```
يعني أن عنوان الوصول إلى هذه الواجهة سيكون:
```
/api/captcha
```

---

## ✅ الدالة الأساسية: ReceiveCaptcha

```csharp
[HttpPost]
public IActionResult ReceiveCaptcha([FromBody] CaptchaData data)
```

### 📥 ماذا تفعل هذه الدالة؟
1. **تستقبل بيانات المستخدم** على هيئة `JSON` وتحوّلها إلى كائن `CaptchaData`.
2. **تستخرج عنوان الـ IP** للمستخدم.
3. **تسجل وقت المحاولة** الحالي.
4. **ترسل البيانات إلى الدالة `AnalyzeIpBehavior`** لتحليل السلوك واتخاذ القرار.
5. **تطبع كل التفاصيل في الـ Console** (للمطور).
6. **ترجع رد بسيط للأمامي** يحتوي على:
   - الرسالة العامة.
   - عنوان الـ IP.
   - نتيجة التحليل (`ok`, `banned`, إلخ).

---

## ✅ تفاصيل كل خطوة في الكود

### 1️⃣ طباعة البيانات الواردة
```csharp
Console.WriteLine("📥 Received Captcha Data:");
Console.WriteLine(...);
```
➡️ لعرض محتوى JSON في الكونسول بتنسيق جميل.

---

### 2️⃣ استخراج عنوان الـ IP
```csharp
string ip = HttpContext.Connection.RemoteIpAddress?.ToString() ?? "unknown";
```
➡️ نستخدم هذا العنوان للتمييز بين المستخدمين، ولتتبع تاريخ كل IP.

---

### 3️⃣ تسجيل توقيت المحاولة
```csharp
DateTime now = DateTime.Now;
Console.WriteLine($"🕒 Attempt Time: {now}");
```
➡️ فقط لتسجيل الوقت، ولعرضه في الـ Console أثناء التطوير.

---

### 4️⃣ تحليل السلوك باستخدام `BehaviorAnalyzer`
```csharp
string result = BehaviorAnalyzer.AnalyzeIpBehavior(data, ip);
```
➡️ هنا يتم تمرير بيانات المستخدم مع عنوان IP إلى كلاس التحليل، والذي يتولى كل المنطق الأمني.

---

### 5️⃣ عرض النتيجة
```csharp
Console.WriteLine($"🎯 نتيجة التحليل النهائي: {result}");
```
➡️ تعرض في الكونسول نتيجة القرار: هل هو `ok`, `banned`, `next-level`, إلخ...

---

### 6️⃣ إرجاع الرد إلى الواجهة الأمامية
```csharp
return Ok(new
{
    message = "✅ Data received and analyzed.",
    result = result,
    ip = ip
});
```
➡️ يتم إرسال النتيجة إلى الأمامي، ليعرف ماذا يفعل (يسمح – يعيد الاختبار – يمنع).

---

## ✅ متى تُستدعى هذه الدالة؟
عند كل محاولة CAPTCHA في الواجهة الأمامية، يتم استدعاء `/api/captcha` عن طريق JavaScript `fetch()` باستخدام `POST`.

---

## ✅ هل يتم الحفظ في قاعدة بيانات؟
لا، النظام الحالي يعمل في الذاكرة فقط باستخدام Dictionary، لكنه قابل للتوسعة لاحقًا.

---

## ✅ لماذا هذا مهم؟
لأنه أول نقطة استقبال لأي بيانات حساسة في النظام.  
إذا تم تأمين هذا المكان بشكل صحيح، ستصبح كل المنظومة أقوى وأكثر أمانًا.




1. **كيف يتم تحليل سلوك المستخدم بشكل دقيق:**
   - في الكود الحالي، يتم استخدام الدالة `AnalyzeIpBehavior` لتحليل بيانات السلوك المرسلة من الواجهة الأمامية. ربما يكون من المفيد توضيح بشكل أكبر **كيف يتم تحليل السلوك**، وما هي المؤشرات الدقيقة التي يتم النظر فيها داخل `AnalyzeIpBehavior` (مثل: نمط الحركة، السرعة، التباطؤ، إلخ).

2. **التعامل مع الحظر المؤقت والدائم:**
   - تم شرح الحظر في التوثيق، لكن قد يكون من المفيد إضافة **كيفية التعامل مع فترات الحظر المؤقت**، أو كم من الوقت يجب أن تبقى `BannedUntil` قبل أن يعود المستخدم لتفاعل طبيعي.

3. **كيفية التعامل مع السلوك "المشبوه":**
   - لم يتم التطرق بشكل تفصيلي إلى كيفية **تصنيف السلوك "المشبوه"** إذا كان `behaviorType` هو `uncertain` أو `robot`. قد تحتاج لتوضيح كيفية تصنيف هذه الأنواع بشكل كامل.

4. **الـ Logging والتوثيق داخل الـ Backend:**
   - من الجيد أن نوضح كيف يمكن توثيق البيانات المُرسلة والتحليلات لكل IP داخل قاعدة بيانات مستقبلًا، حتى إذا كانت العملية الآن تتم داخل الذاكرة فقط باستخدام `Dictionary`.

5. **تحسينات مستقبلية:**
   - إضافة بعض الأفكار حول كيف يمكن تحسين المنظومة باستخدام الذكاء الاصطناعي أو خوارزميات تعلم الآلة (مثل تحليل السلوك أكثر دقة).

---

### النتيجة:
الشرح الحالي يتناول كل شيء مهم، لكن إذا أردت إضافة بعض التوضيحات أو التوسع في بعض الجزئيات مثل **المؤشرات التحليلية** أو **سياقات الحظر**، يمكن تحديث الشرح.







------------------------------

using Microsoft.AspNetCore.Mvc;
using CaptchaApi.Models;
using CaptchaApi.Services;
using System.Text.Json;
using System.Collections.Concurrent;

namespace CaptchaApi.Controllers;

// ✅ وحدة تحكم (Controller) لاستقبال بيانات CAPTCHA
[ApiController]
[Route("api/[controller]")]
public class CaptchaController : ControllerBase
{
    private static ConcurrentDictionary<string, int> attemptsByIp = new();

    [HttpPost]
    public IActionResult ReceiveCaptcha([FromBody] JsonElement data)
    {
        Console.Clear();
        PrintInfo("-Received Captcha Data:", ConsoleColor.Green);

        string ip = HttpContext.Connection.RemoteIpAddress?.ToString() switch
        {
            "::1" => "127.0.0.1",
            null => "unknown",
            var realIp => realIp
        };

        Console.WriteLine($"🌐 Stored IP: {ip}");


        if (data.TryGetProperty("mode", out var modeProperty) && modeProperty.GetString() == "robot-detected")
        {
            return FakeBoxAnalyzer.HandleRobotDetected(data, ip);
        }

        // ✅ طباعة عناوين جميلة
        PrintInfo("✅ Normal human interaction received.", ConsoleColor.Green);
        PrintInfo("📦 Received Human Interaction Data:", ConsoleColor.Yellow);

        // ✅ طباعة الداتا كاملة كـ JSON مرتب
        Console.WriteLine(JsonSerializer.Serialize(data, new JsonSerializerOptions { WriteIndented = true }));

        // ✅ تحويل الداتا إلى كائن strongly-typed
        var captchaData = JsonSerializer.Deserialize<CaptchaData>(data);

        // ✅ تحديد الحالة بناءً على القيمة القادمة
        string finalStatus = captchaData?.Status == "banned" ? "banned" : "human";
        Console.WriteLine($"✅ Final Status: {finalStatus.ToUpper()}");



        // ✅ منع المستخدمين المحظورين سابقًا حتى لو بدوا طبيعيين الآن
        if (finalStatus == "human" && UserAccessLog.IsBanned(ip))
        {
            Console.WriteLine("❌ Previously banned IP tried again. Blocking.");

            // تخزين محاولة جديدة مرفوضة
            UserAccessLog.Add(ip, new AccessEntry
            {
                Timestamp = DateTime.Now,
                Status = "banned",
                Reason = "Previously banned",
                SessionId = captchaData?.SessionId
            });

            return Ok(new { success = false, status = "banned" });
        }

        // ✅ تخزين المحاولة الناجحة أو العادية
        UserAccessLog.Add(ip, new AccessEntry
        {
            Timestamp = DateTime.Now,
            Status = finalStatus,
            Reason = null,
            SessionId = captchaData?.SessionId
        });


        return Ok(new { success = true, status = finalStatus });
    }




















    private void PrintInfo(string message, ConsoleColor color)
    {
        Console.ForegroundColor = color;
        Console.WriteLine(message);
        Console.ResetColor();
    }
}