

# 📄 BehaviorAnalyzer – شرح كامل

## ✅ الغرض من الكلاس
`BehaviorAnalyzer` هو كلاس مسؤول عن تحليل سلوك المستخدمين (البشر أو الروبوتات) بناءً على بيانات يتم إرسالها من الواجهة الأمامية (Frontend). الهدف من هذا التحليل هو:
- كشف السلوك الغير بشري أو المشبوه.
- تتبع المحاولات المتكررة من نفس عنوان IP.
- تحديد ما إذا كان المستخدم يجب حظره مؤقتًا أو دائمًا.
- إرسال رد مناسب إلى الواجهة الأمامية مثل: `"ok"` أو `"banned"`.

---

## ✅ الهيكل الأساسي للكلاس

```csharp
public class BehaviorAnalyzer
{
    private static Dictionary<string, UserBehaviorRecord> records = new();

    public static string AnalyzeBehavior(CaptchaData data, string ip)
    {
        // منطق التحليل الكامل هنا...
    }
}
```

---

## ✅ الوظائف الرئيسية

### 1️⃣ تخزين السجلات حسب الـ IP
يتم استخدام Dictionary باسم `records` لتخزين معلومات كل IP، مثل:
- عدد المحاولات الكلية والسيئة.
- وقت أول وآخر محاولة.
- نوع السلوك الأخير.
- مستوى التحذير (WarningLevel).
- حالة الحظر (مؤقت أو دائم).

---

### 2️⃣ الدالة الأساسية `AnalyzeBehavior`
تستقبل:
- `CaptchaData data`: بيانات تحليل السلوك القادمة من الـ JS.
- `string ip`: عنوان المستخدم الذي أرسل البيانات.

ثم تقوم بـ:
- التحقق مما إذا كان الـ IP محظور مسبقًا.
- إنشاء سجل جديد إذا كان هذا أول ظهور للـ IP.
- تحديث الإحصائيات حسب السلوك.
- حساب WarningLevel بناءً على معايير مثل:
  - `behaviorType`
  - `movementPattern`
  - `suddenStopCount`
  - `decelerationRate`
- اتخاذ القرار الأمني:
  - `"ok"`: المستخدم آمن.
  - `"banned"`: المستخدم مشبوه ويجب حظره مؤقتًا أو دائمًا.

---

### 3️⃣ منطق الحظر
- **الحظر المؤقت** يتم عندما يكون `WarningLevel >= 3`، ويتم إيقاف المستخدم 10 دقائق.
- **الحظر الدائم** عندما يتجاوز `WarningLevel >= 8`.

---

### 4️⃣ قابلية التوسع
يمكنك لاحقًا:
- إضافة تخزين دائم (قواعد بيانات).
- استخدام بيانات إضافية مثل الموقع الجغرافي.
- تطوير منطق `WarningLevel` باستخدام الذكاء الاصطناعي أو التحليل الإحصائي.



#### ✅ 5️⃣ تفاصيل الخصائص التي يتم تتبعها لكل IP (`UserBehaviorRecord`)
- `FirstSeen`: أول مرة ظهر فيها الـ IP.
- `LastSeen`: آخر تفاعل مع السيرفر.
- `TotalAttempts`: عدد المحاولات الكليّة.
- `BadAttempts`: عدد المحاولات المشبوهة.
- `LastBehaviorType`: آخر نوع سلوك تم تسجيله (human / uncertain / robot).
- `LastMovementPattern`: نمط الحركة الأخير (too stable / chaotic / normal).
- `WarningLevel`: مقياس خطورة هذا المستخدم.
- `IsBanned`: هل هو محظور دائمًا؟
- `BannedUntil`: وقت انتهاء الحظر المؤقت (null إذا لم يكن محظورًا مؤقتًا).

---

#### ✅ 6️⃣ العلاقة مع الأمامي (Frontend)
- الأمامي يرسل كل محاولة على شكل JSON.
- الخلفي يستقبل البيانات، ويحللها، ويقوم بتحديث سجل المستخدم.
- الخلفي يُعيد رد يحتوي على `"ok"` أو `"banned"` ليعرف الأمامي ما يجب فعله.

---

#### ✅ 7️⃣ لماذا هذا مهم أمنيًا؟
- لأننا لا نثق بالمستخدم! كل محاولة يتم تسجيلها وتحليلها.
- النظام لا يعتمد فقط على حركة الماوس بل أيضًا على:
  - عدد التكرار.
  - التباطؤ.
  - النقرات الغريبة.
  - الزمن.
- حتى إذا حاول الروبوت التصرف مثل إنسان، **نكتشفه على المدى الطويل**.

